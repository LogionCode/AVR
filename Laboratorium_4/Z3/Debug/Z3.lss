
Z3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000658  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000598  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031b  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010e  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  8a:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
#include <avr/interrupt.h>

volatile int czas_przebiegu_2;
const int czas_przebiegu_1 = 10000; // 0.16 ms;

ISR(INT0_vect){ // przy wcisnieciu przycisku
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	
	if(czas_przebiegu_2 > 12000){  // czy stan jest wiêkszy ni¿ minimalny
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ac:	81 3e       	cpi	r24, 0xE1	; 225
  ae:	9e 42       	sbci	r25, 0x2E	; 46
  b0:	94 f1       	brlt	.+100    	; 0x116 <__vector_1+0x84>
		if(czas_przebiegu_2 - 5000 > 12000){ // czy mo¿na skróciæ czas
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ba:	88 58       	subi	r24, 0x88	; 136
  bc:	93 41       	sbci	r25, 0x13	; 19
  be:	81 3e       	cpi	r24, 0xE1	; 225
  c0:	9e 42       	sbci	r25, 0x2E	; 46
  c2:	ec f0       	brlt	.+58     	; 0xfe <__vector_1+0x6c>
			czas_przebiegu_2 -= 5000; // skracanie czasu
  c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  cc:	88 58       	subi	r24, 0x88	; 136
  ce:	93 41       	sbci	r25, 0x13	; 19
  d0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			OCR1A = czas_przebiegu_2; // aktualizacja licznika
  d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  dc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e0:	9b bd       	out	0x2b, r25	; 43
  e2:	8a bd       	out	0x2a, r24	; 42
			if(OCR1A >= TCNT1) // czy TCNT1 nie przekroczy³o licznika
  e4:	2a b5       	in	r18, 0x2a	; 42
  e6:	3b b5       	in	r19, 0x2b	; 43
  e8:	8c b5       	in	r24, 0x2c	; 44
  ea:	9d b5       	in	r25, 0x2d	; 45
  ec:	28 17       	cp	r18, r24
  ee:	39 07       	cpc	r19, r25
  f0:	d8 f1       	brcs	.+118    	; 0x168 <__vector_1+0xd6>
			{
				TCNT1 = OCR1A -1; // poprawa wartoœci TCNT1
  f2:	8a b5       	in	r24, 0x2a	; 42
  f4:	9b b5       	in	r25, 0x2b	; 43
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	9d bd       	out	0x2d, r25	; 45
  fa:	8c bd       	out	0x2c, r24	; 44
  fc:	35 c0       	rjmp	.+106    	; 0x168 <__vector_1+0xd6>
			}
		}
		else{
			czas_przebiegu_2 -= 5000; // skracanie czasu
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	88 58       	subi	r24, 0x88	; 136
 108:	93 41       	sbci	r25, 0x13	; 19
 10a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			PORTA &= 0x7F; // wylaczamy diodê
 112:	df 98       	cbi	0x1b, 7	; 27
 114:	29 c0       	rjmp	.+82     	; 0x168 <__vector_1+0xd6>
		}
	}
	else {
		if(OCR1A == czas_przebiegu_2){ // czy w trybie 2
 116:	2a b5       	in	r18, 0x2a	; 42
 118:	3b b5       	in	r19, 0x2b	; 43
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 122:	28 17       	cp	r18, r24
 124:	39 07       	cpc	r19, r25
 126:	c9 f4       	brne	.+50     	; 0x15a <__vector_1+0xc8>
			czas_przebiegu_2 = 12000; // ustawienie minimalnego czasu
 128:	80 ee       	ldi	r24, 0xE0	; 224
 12a:	9e e2       	ldi	r25, 0x2E	; 46
 12c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			OCR1A = czas_przebiegu_2; // aktualizacja licznika
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13c:	9b bd       	out	0x2b, r25	; 43
 13e:	8a bd       	out	0x2a, r24	; 42
			if(OCR1A >= TCNT1) // czy TCNT1 nie przekroczy³o licznika
 140:	2a b5       	in	r18, 0x2a	; 42
 142:	3b b5       	in	r19, 0x2b	; 43
 144:	8c b5       	in	r24, 0x2c	; 44
 146:	9d b5       	in	r25, 0x2d	; 45
 148:	28 17       	cp	r18, r24
 14a:	39 07       	cpc	r19, r25
 14c:	60 f0       	brcs	.+24     	; 0x166 <__vector_1+0xd4>
			{
				TCNT1 = OCR1A -1; // poprawa wartoœci TCNT1
 14e:	8a b5       	in	r24, 0x2a	; 42
 150:	9b b5       	in	r25, 0x2b	; 43
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	9d bd       	out	0x2d, r25	; 45
 156:	8c bd       	out	0x2c, r24	; 44
 158:	06 c0       	rjmp	.+12     	; 0x166 <__vector_1+0xd4>
			}
		}
		else{
			czas_przebiegu_2 = 12000; // ustawienie minimalnego czasu
 15a:	80 ee       	ldi	r24, 0xE0	; 224
 15c:	9e e2       	ldi	r25, 0x2E	; 46
 15e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		PORTA &= 0x7F; // wylaczamy diodê
 166:	df 98       	cbi	0x1b, 7	; 27
	}
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_7>:

ISR(TIMER1_COMPA_vect){ // przy osiagnieciu okreslonej ilosci tickow
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
	PORTA ^= 0x01; // negowanie stanu diody
 18c:	9b b3       	in	r25, 0x1b	; 27
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	89 27       	eor	r24, r25
 192:	8b bb       	out	0x1b, r24	; 27
	
	if(OCR1A == czas_przebiegu_2){ // zmiana czasu trwania przebiegu
 194:	2a b5       	in	r18, 0x2a	; 42
 196:	3b b5       	in	r19, 0x2b	; 43
 198:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a0:	28 17       	cp	r18, r24
 1a2:	39 07       	cpc	r19, r25
 1a4:	29 f4       	brne	.+10     	; 0x1b0 <__vector_7+0x36>
		OCR1A = czas_przebiegu_1;
 1a6:	80 e1       	ldi	r24, 0x10	; 16
 1a8:	97 e2       	ldi	r25, 0x27	; 39
 1aa:	9b bd       	out	0x2b, r25	; 43
 1ac:	8a bd       	out	0x2a, r24	; 42
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <__vector_7+0x42>
	}
	else{
		OCR1A = czas_przebiegu_2;
 1b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	9b bd       	out	0x2b, r25	; 43
 1ba:	8a bd       	out	0x2a, r24	; 42
	}
}
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <main>:

int main(void)
{
	DDRA |= 0xF1; // ustwienie PORTA 7 i 0 jako wyjœcie
 1ce:	8a b3       	in	r24, 0x1a	; 26
 1d0:	81 6f       	ori	r24, 0xF1	; 241
 1d2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // ustawienie PORTC jako wyjœcie
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	84 bb       	out	0x14, r24	; 20
	
	PORTD |= 0x04; // pod³¹czenie zasilania do przycisku PORTB 2
 1d8:	92 9a       	sbi	0x12, 2	; 18
	PORTC = 0xFF; // ustawienie stanu poczatkowego diod LED
 1da:	85 bb       	out	0x15, r24	; 21
	PORTA |= 0x80; // w³¹czenie diody 7
 1dc:	df 9a       	sbi	0x1b, 7	; 27
	
	MCUCR |= 0x02; // ustawienie trybu zbocza opadaj¹cego na INT0
 1de:	85 b7       	in	r24, 0x35	; 53
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	85 bf       	out	0x35, r24	; 53
	GICR |= 0x40; // w³¹czenie przerwania INT0
 1e4:	8b b7       	in	r24, 0x3b	; 59
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	8b bf       	out	0x3b, r24	; 59
	
	czas_przebiegu_2 = 20000; // czas na 0.32 sek
 1ea:	80 e2       	ldi	r24, 0x20	; 32
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	OCR1A = czas_przebiegu_2; // ustawiam czas poczatkowy
 1f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1fe:	9b bd       	out	0x2b, r25	; 43
 200:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK |= 0x10; // w³aczenie timera 1 na tryb porównywania
 202:	89 b7       	in	r24, 0x39	; 57
 204:	80 61       	ori	r24, 0x10	; 16
 206:	89 bf       	out	0x39, r24	; 57
	
	TCCR1B |= 0x08; // tryb ctc
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= 0x03; // preskalar na 1/64
 20e:	8e b5       	in	r24, 0x2e	; 46
 210:	83 60       	ori	r24, 0x03	; 3
 212:	8e bd       	out	0x2e, r24	; 46
	
	sei(); // w³¹czenie obs³ugi przerwañ
 214:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f e3       	ldi	r18, 0x3F	; 63
 218:	8d e0       	ldi	r24, 0x0D	; 13
 21a:	93 e0       	ldi	r25, 0x03	; 3
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x4e>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x58>
 226:	00 00       	nop
	
	while (1)
	{
		_delay_ms(250); // opóŸnienie
		PORTC =~PORTC; // zmiana animacji diod
 228:	85 b3       	in	r24, 0x15	; 21
 22a:	80 95       	com	r24
 22c:	85 bb       	out	0x15, r24	; 21
 22e:	f3 cf       	rjmp	.-26     	; 0x216 <main+0x48>

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
