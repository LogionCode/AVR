
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000626  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c0  00000000  00000000  00001419  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#define F_CPU 4000000
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(INT0_vect){ // przy wcisnieciu przycisku
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	PORTA |= 0x01; // w³¹czenie diody
  78:	d8 9a       	sbi	0x1b, 0	; 27
	
	TCCR1B |= 0x03; // w³¹czenie timera 1 preskalar jako 1/64
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	83 60       	ori	r24, 0x03	; 3
  7e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= 0x08; // tryb ctc
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	88 60       	ori	r24, 0x08	; 8
  84:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0; // wyzerowanie timera
  86:	1d bc       	out	0x2d, r1	; 45
  88:	1c bc       	out	0x2c, r1	; 44
}
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <__vector_7>:

ISR(TIMER1_COMPA_vect){ // przy osiagnieciu okreslonej ilosci tickow
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
	PORTA &= 0xFE; // wy³¹czenie diody
  a2:	d8 98       	cbi	0x1b, 0	; 27
	
	TCCR1B &= 0xF8; // wy³¹czenie timera 1
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	8e bd       	out	0x2e, r24	; 46
}
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <main>:
	
int main(void)
{
	DDRA |= 0x01; // ustwienie PORTA 0 jako wyjœcie
  b6:	d0 9a       	sbi	0x1a, 0	; 26
	DDRC = 0xFF; // ustawienie PORTC jako wyjœcie
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
	
	PORTD |= 0x04; // pod³¹czenie zasilania do przycisku PORTB 2
  bc:	92 9a       	sbi	0x12, 2	; 18
	PORTC = 0xFF; // ustawienie stanu poczatkowego diod LED
  be:	85 bb       	out	0x15, r24	; 21
	
	MCUCR |= 0x02; // ustawienie trybu zbocza opadaj¹cego na INT0
  c0:	85 b7       	in	r24, 0x35	; 53
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	85 bf       	out	0x35, r24	; 53
	GICR |= 0x40; // w³¹czenie przerwania INT0
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8b bf       	out	0x3b, r24	; 59
	
	OCR1A = 31250; // ustawienie celu czasu na 0,5 sek
  cc:	82 e1       	ldi	r24, 0x12	; 18
  ce:	9a e7       	ldi	r25, 0x7A	; 122
  d0:	9b bd       	out	0x2b, r25	; 43
  d2:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK |= 0x10; // w³aczenie timera 1 na tryb porównywania
  d4:	89 b7       	in	r24, 0x39	; 57
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	89 bf       	out	0x39, r24	; 57
	
	sei(); // w³¹czenie obs³ugi przerwañ
  da:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f eb       	ldi	r18, 0xBF	; 191
  de:	84 ed       	ldi	r24, 0xD4	; 212
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x2c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x36>
  ec:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(150); // opóŸnienie
		PORTC =~PORTC; // zmiana animacji diod	
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	80 95       	com	r24
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	f3 cf       	rjmp	.-26     	; 0xdc <main+0x26>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
