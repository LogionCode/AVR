
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bf  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a3  00000000  00000000  00000993  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fc  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024d  00000000  00000000  0000162a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>


ISR(INT0_vect) // przerwanie INT0
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	ef 93       	push	r30
  88:	ff 93       	push	r31
	cli(); // wy³¹czenie przerwañ na czas tego przerwania
  8a:	f8 94       	cli
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	50 e0       	ldi	r21, 0x00	; 0
	
	for(int i = 0; i < 4; i++)
	{
		PORTD = (~_BV(i+4) & 0xF0) | (PORTD & 0x0F); // ustawienie starszego bitu na pozycji i na 0 i 1 na resztê
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	92 b3       	in	r25, 0x12	; 18
  96:	9a 01       	movw	r18, r20
  98:	2d 5f       	subi	r18, 0xFD	; 253
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
  9c:	fb 01       	movw	r30, r22
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__vector_1+0x38>
  a0:	ee 0f       	add	r30, r30
  a2:	ff 1f       	adc	r31, r31
  a4:	2a 95       	dec	r18
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <__vector_1+0x34>
  a8:	8e 2f       	mov	r24, r30
  aa:	80 95       	com	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	9f 70       	andi	r25, 0x0F	; 15
  b0:	89 2b       	or	r24, r25
  b2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	87 ee       	ldi	r24, 0xE7	; 231
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <__vector_1+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x52>
  be:	00 00       	nop
		_delay_ms(1);
		if(!(PIND & 0x04)) // wyswietlenie na diodach led ktory klawisz jest wcisniety
  c0:	82 99       	sbic	0x10, 2	; 16
  c2:	0c c0       	rjmp	.+24     	; 0xdc <__vector_1+0x70>
			{
				PORTA = (PORTA & 0x0F) | (((i+1) << 4) & 0xF0);
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	28 2f       	mov	r18, r24
  c8:	2f 70       	andi	r18, 0x0F	; 15
  ca:	ca 01       	movw	r24, r20
  cc:	82 95       	swap	r24
  ce:	92 95       	swap	r25
  d0:	90 7f       	andi	r25, 0xF0	; 240
  d2:	98 27       	eor	r25, r24
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	98 27       	eor	r25, r24
  d8:	82 2b       	or	r24, r18
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	4f 5f       	subi	r20, 0xFF	; 255
  de:	5f 4f       	sbci	r21, 0xFF	; 255

ISR(INT0_vect) // przerwanie INT0
{
	cli(); // wy³¹czenie przerwañ na czas tego przerwania
	
	for(int i = 0; i < 4; i++)
  e0:	45 30       	cpi	r20, 0x05	; 5
  e2:	51 05       	cpc	r21, r1
  e4:	b9 f6       	brne	.-82     	; 0x94 <__vector_1+0x28>
			{
				PORTA = (PORTA & 0x0F) | (((i+1) << 4) & 0xF0);
			}
	}
	
	PORTD &= 0x0F; // oczyszczenie starszych bitów
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	82 bb       	out	0x12, r24	; 18
	
	sei(); // ponowne w³¹czenie przerwañ
  ec:	78 94       	sei
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_2>:

ISR(INT1_vect) // przerwanie INT0
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	cli(); // wy³¹czenie przerwañ na czas tego przerwania
 126:	f8 94       	cli
 128:	44 e0       	ldi	r20, 0x04	; 4
 12a:	50 e0       	ldi	r21, 0x00	; 0
	
	for(int i = 0; i < 4; i++)
	{
		PORTD = (~_BV(i+4) & 0xF0) | (PORTD & 0x0F); // ustawienie starszego bitu na pozycji i na 0 i 1 na resztê
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	92 b3       	in	r25, 0x12	; 18
 132:	9b 01       	movw	r18, r22
 134:	04 2e       	mov	r0, r20
 136:	02 c0       	rjmp	.+4      	; 0x13c <__vector_2+0x30>
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <__vector_2+0x2c>
 140:	82 2f       	mov	r24, r18
 142:	80 95       	com	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	9f 70       	andi	r25, 0x0F	; 15
 148:	89 2b       	or	r24, r25
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	87 ee       	ldi	r24, 0xE7	; 231
 14e:	93 e0       	ldi	r25, 0x03	; 3
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <__vector_2+0x44>
 154:	00 c0       	rjmp	.+0      	; 0x156 <__vector_2+0x4a>
 156:	00 00       	nop
		_delay_ms(1);
		if(!(PIND & 0x08)) // sprawdzenie czy przycisk jest wcisniety
 158:	83 99       	sbic	0x10, 3	; 16
 15a:	0d c0       	rjmp	.+26     	; 0x176 <__vector_2+0x6a>
		{
			PORTA = (PORTA & 0x0F) | (((i+5) << 4) & 0xF0); // wyswietlenie na diodach led ktory klawisz jest wcisniety
 15c:	2b b3       	in	r18, 0x1b	; 27
 15e:	ca 01       	movw	r24, r20
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	82 95       	swap	r24
 164:	92 95       	swap	r25
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	98 27       	eor	r25, r24
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	98 27       	eor	r25, r24
 16e:	92 2f       	mov	r25, r18
 170:	9f 70       	andi	r25, 0x0F	; 15
 172:	89 2b       	or	r24, r25
 174:	8b bb       	out	0x1b, r24	; 27
 176:	4f 5f       	subi	r20, 0xFF	; 255
 178:	5f 4f       	sbci	r21, 0xFF	; 255

ISR(INT1_vect) // przerwanie INT0
{
	cli(); // wy³¹czenie przerwañ na czas tego przerwania
	
	for(int i = 0; i < 4; i++)
 17a:	48 30       	cpi	r20, 0x08	; 8
 17c:	51 05       	cpc	r21, r1
 17e:	c1 f6       	brne	.-80     	; 0x130 <__vector_2+0x24>
		{
			PORTA = (PORTA & 0x0F) | (((i+5) << 4) & 0xF0); // wyswietlenie na diodach led ktory klawisz jest wcisniety
		}
	}
	
	PORTD &= 0x0F; // oczyszczenie starszych bitów
 180:	82 b3       	in	r24, 0x12	; 18
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	82 bb       	out	0x12, r24	; 18
	
	sei(); // ponowne w³¹czenie przerwañ
 186:	78 94       	sei
}
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <main>:

int main(void)
{
	DDRA = 0xFF; // ustawienie lini portów na wyjcie
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 1a6:	84 bb       	out	0x14, r24	; 20
	
	PORTA |= 0x08; // wlaczenie 4 od prawej diody na porcie a
 1a8:	db 9a       	sbi	0x1b, 3	; 27
	
	DDRD |= 0xF0; // ustawienie 4 starszych bitów na wyjcie
 1aa:	81 b3       	in	r24, 0x11	; 17
 1ac:	80 6f       	ori	r24, 0xF0	; 240
 1ae:	81 bb       	out	0x11, r24	; 17
	
	PORTD |= 0x0C; // podci¹gniêcie zasilania pod przyciski INT0 i INT1
 1b0:	82 b3       	in	r24, 0x12	; 18
 1b2:	8c 60       	ori	r24, 0x0C	; 12
 1b4:	82 bb       	out	0x12, r24	; 18
	
	MCUCR |= 0x0A; // ustawienie obu przerwañ w tryb falling edge
 1b6:	85 b7       	in	r24, 0x35	; 53
 1b8:	8a 60       	ori	r24, 0x0A	; 10
 1ba:	85 bf       	out	0x35, r24	; 53
	
	GICR |= 0xC0; // w³¹czenie przerwañ INT0 i INT1
 1bc:	8b b7       	in	r24, 0x3b	; 59
 1be:	80 6c       	ori	r24, 0xC0	; 192
 1c0:	8b bf       	out	0x3b, r24	; 59
	
	sei(); // w³¹czenie przerwañ
 1c2:	78 94       	sei
	
	
    while (1) 
    {	
		PORTC ^= 0xFF; // animacja na porcie C
 1c4:	85 b3       	in	r24, 0x15	; 21
 1c6:	80 95       	com	r24
 1c8:	85 bb       	out	0x15, r24	; 21
 1ca:	2f eb       	ldi	r18, 0xBF	; 191
 1cc:	84 ed       	ldi	r24, 0xD4	; 212
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x2e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x38>
 1da:	00 00       	nop
 1dc:	f3 cf       	rjmp	.-26     	; 0x1c4 <main+0x22>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
