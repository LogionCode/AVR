
Z2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000631  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000579  00000000  00000000  000007ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_10>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_10>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(TIMER0_COMP_vect) // przerwanie timer0
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	PORTA = 0x00;
  78:	1b ba       	out	0x1b, r1	; 27
	if((PIND & 0x0F) != 0x0F) // czy wcisniety jest któryœ przycisk
  7a:	80 b3       	in	r24, 0x10	; 16
  7c:	8f 70       	andi	r24, 0x0F	; 15
  7e:	8f 30       	cpi	r24, 0x0F	; 15
  80:	11 f0       	breq	.+4      	; 0x86 <__vector_10+0x1a>
	{
		char wiersz = (PIND & 0x0F); // zapamiêtuje bit wiersza
  82:	80 b3       	in	r24, 0x10	; 16
		char kolumna = (PIND & 0xF0); // zapamiêtuje bit kolumny
  84:	80 b3       	in	r24, 0x10	; 16
		
	}
}
  86:	8f 91       	pop	r24
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <main>:

int main(void)
{
	DDRA = 0xFF; // ustawienie portów a,b i starszych bitow c jako wyjsciowe
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  96:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0xF0;
  98:	91 b3       	in	r25, 0x11	; 17
  9a:	90 6f       	ori	r25, 0xF0	; 240
  9c:	91 bb       	out	0x11, r25	; 17
	
	PORTD |= 0x0F; // podciagniecie zasilania pod przyciski
  9e:	92 b3       	in	r25, 0x12	; 18
  a0:	9f 60       	ori	r25, 0x0F	; 15
  a2:	92 bb       	out	0x12, r25	; 18
	PORTC = 0xFF; // ustawienie stanu animacji
  a4:	85 bb       	out	0x15, r24	; 21
	
	OCR0 = 195; // ustawienie czasu przerwania na 50 milisekund
  a6:	83 ec       	ldi	r24, 0xC3	; 195
  a8:	8c bf       	out	0x3c, r24	; 60
	
	TIMSK | 0x02; // wlaczenie timer0 w trybie porównywania
  aa:	89 b7       	in	r24, 0x39	; 57
	
	TCCR0 |= 0b01000101; // preskalar na /1024 i tryb ctc
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	85 64       	ori	r24, 0x45	; 69
  b0:	83 bf       	out	0x33, r24	; 51
	
	sei();
  b2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f eb       	ldi	r18, 0xBF	; 191
  b6:	84 ed       	ldi	r24, 0xD4	; 212
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x28>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x32>
  c4:	00 00       	nop
	
    while (1) 
    {
	    _delay_ms(150);
		PORTC ^= 0xFF; // zmianu stanu animacji
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	80 95       	com	r24
  ca:	85 bb       	out	0x15, r24	; 21
		asm("nop");	
  cc:	00 00       	nop
  ce:	f2 cf       	rjmp	.-28     	; 0xb4 <main+0x22>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
