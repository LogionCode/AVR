
Z3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000064c  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bc  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d6  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000340  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000109  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 93 00 	call	0x126	; 0x126 <main>
  74:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_10>:
	if(x==4)
		return 3;
	return x;
}
ISR(TIMER0_COMP_vect) // przerwanie timer0
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
	PORTD = (~_BV(licznik+4) && 0xF0) | (PORTD & 0x0F); // ustawiam dany bit na 0
  92:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	4c 5f       	subi	r20, 0xFC	; 252
  9e:	5f 4f       	sbci	r21, 0xFF	; 255
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <__vector_10+0x2e>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	4a 95       	dec	r20
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <__vector_10+0x2a>
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	2f 3f       	cpi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	09 f4       	brne	.+2      	; 0xb8 <__vector_10+0x3c>
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	89 2b       	or	r24, r25
  bc:	82 bb       	out	0x12, r24	; 18
	if((PIND & 0x0F) != 0x0F) // sprawdzam czy wcisniety jest przycisk
  be:	80 b3       	in	r24, 0x10	; 16
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	8f 30       	cpi	r24, 0x0F	; 15
  c4:	91 f0       	breq	.+36     	; 0xea <__vector_10+0x6e>
	{
		PORTA = (PORTA & 0xF0) | (1 << (4 + licznik));
  c6:	2b b3       	in	r18, 0x1b	; 27
  c8:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d0:	4c 5f       	subi	r20, 0xFC	; 252
  d2:	5f 4f       	sbci	r21, 0xFF	; 255
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <__vector_10+0x62>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	4a 95       	dec	r20
  e0:	e2 f7       	brpl	.-8      	; 0xda <__vector_10+0x5e>
  e2:	92 2f       	mov	r25, r18
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	89 2b       	or	r24, r25
  e8:	8b bb       	out	0x1b, r24	; 27
	}
	
	licznik++; // kolejny bit
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(licznik >3) // jezeli licznik wyjdzie poza zakres
  fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 104:	04 97       	sbiw	r24, 0x04	; 4
 106:	24 f0       	brlt	.+8      	; 0x110 <__vector_10+0x94>
	{
		licznik = 0; // resetuje stan licznika
 108:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	5f 91       	pop	r21
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <main>:

int main(void)
{
	DDRA = 0xFF; // ustawienie portów a,b i starszych bitow c jako wyjsciowe
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 12a:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0xF0;
 12c:	91 b3       	in	r25, 0x11	; 17
 12e:	90 6f       	ori	r25, 0xF0	; 240
 130:	91 bb       	out	0x11, r25	; 17
	
	PORTD |= 0x0F; // podciagniecie zasilania pod przyciski
 132:	92 b3       	in	r25, 0x12	; 18
 134:	9f 60       	ori	r25, 0x0F	; 15
 136:	92 bb       	out	0x12, r25	; 18
	PORTC = 0xFF; // ustawienie stanu animacji
 138:	85 bb       	out	0x15, r24	; 21
	
	OCR0 = 195; // ustawienie czasu przerwania na 50 milisekund
 13a:	83 ec       	ldi	r24, 0xC3	; 195
 13c:	8c bf       	out	0x3c, r24	; 60
	
	TIMSK |= 0x02; // wlaczenie timer0 w trybie porównywania
 13e:	89 b7       	in	r24, 0x39	; 57
 140:	82 60       	ori	r24, 0x02	; 2
 142:	89 bf       	out	0x39, r24	; 57
	
	TCCR0 |= 0b01000101; // preskalar na /1024 i tryb ctc
 144:	83 b7       	in	r24, 0x33	; 51
 146:	85 64       	ori	r24, 0x45	; 69
 148:	83 bf       	out	0x33, r24	; 51
	
	sei();
 14a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f eb       	ldi	r18, 0xBF	; 191
 14e:	84 ed       	ldi	r24, 0xD4	; 212
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x2c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x36>
 15c:	00 00       	nop
	
	while (1)
	{
		_delay_ms(150);
		PORTC ^= 0xFF; // zmianu stanu animacji
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	80 95       	com	r24
 162:	85 bb       	out	0x15, r24	; 21
		asm("nop");
 164:	00 00       	nop
 166:	f2 cf       	rjmp	.-28     	; 0x14c <main+0x26>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
